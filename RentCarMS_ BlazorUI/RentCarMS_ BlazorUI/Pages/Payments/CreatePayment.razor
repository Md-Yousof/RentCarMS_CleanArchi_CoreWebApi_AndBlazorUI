
@page "/create-payment"
@using RentCarMS__BlazorUI.Data.Models;
@using RentCarMS__BlazorUI.Services.Payments;
@using RentCarMS__BlazorUI.Pages.Payments;
@using RentCarMS__BlazorUI.Services.RentCarDetails
@using RentCarMS__BlazorUI.Services.RentCars;

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-lg-9">
            <h2>Create Payment</h2>
        </div>
        <div class="col-lg-3 text-right">
            <a href="/payment" role="button" class="btn btn-secondary btn-sm">Back to List</a>
        </div>
    </div>

    <EditForm Model="newPayment" OnValidSubmit="CreatePaymentAsync" class="needs-validation">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-md-6">

                <div class="form-group">
                    <label for="rentCarID">Rent Car:</label>
                    <select class="form-control" id="rentCarID" @bind="newPayment.RentCarID" required>
                        <option value="">--Select RentCar--</option>
                        @foreach (var rentcar in memberInfoSelected)
                        {
                            <option value="@rentcar.RentCarID">@rentcar.MemberInfo</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => newPayment.RentCarID)" />
                </div>

                <div class="form-group">
                    <label for="rentCarDetailID">Rent Car Detail:</label>
                    <select class="form-control" id="rentCarDetailID" @bind="newPayment.RentCarDetailID" required>
                        <option value="">--Select RentCarDetail--</option>
                        @foreach (var rentcarDetails in selectedRentCarDetail.Where(x => x.RentCarID == newPayment.RentCarID))
                        {
                            <option value="@rentcarDetails.RentCarDetailID">@rentcarDetails.CarInfo</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => newPayment.RentCarDetailID)" />
                </div>

                <div class="form-group">
                    <label for="paymentDate">Payment Date:</label>
                    <InputDate id="paymentDate" class="form-control" @bind-Value="newPayment.PaymentDate" required />
                    <ValidationMessage For="@(() => newPayment.PaymentDate)" />
                </div>

                <div class="form-group">
                    <label for="nofInstallMent">Number of Installments:</label>
                    <InputNumber id="nofInstallMent" class="form-control" @bind-Value="newPayment.NofInstallMent"  />
                    <ValidationMessage For="@(() => newPayment.NofInstallMent)" />
                </div>

                <div class="form-group">
                    <label for="advanceInstallMent">Advance Installment:</label>
                    <InputNumber id="advanceInstallMent" class="form-control" @bind-Value="newPayment.AdvanceInstallMent"  />
                    <ValidationMessage For="@(() => newPayment.AdvanceInstallMent)" />
                </div>

                <div class="form-group">
                    <label for="paidAmmount">Paid Amount:</label>
                    <input type="number" class="form-control" id="paidAmmount" value="@CalculatePaidAmount()" readonly />
                </div>

                <button type="submit" class="btn btn-primary mt-3">Create Payment</button>

            </div>
        </div>
    </EditForm>
</div>

@code {


    private Payment newPayment = new Payment();
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    [Inject]
    private IPaymentService PaymentService { get; set; }


    public async Task CreatePaymentAsync()
    {
        await PaymentService.CreatePayment(newPayment);
        NavigationManager.NavigateTo("/payment");
    }

    private List<RentCarDetail> selectedRentCarDetail = new List<RentCarDetail>();
    [Inject]
    private IRenCareDetailService RentCareDetailService { get; set; }
    [Inject]
    private IRentCar RentcarService { get; set; }
    private List<RentCar> memberInfoSelected = new List<RentCar>();

    protected override async Task OnInitializedAsync()
    {
        //selectedRentCarDetail = (await RentCareDetailService.GetAllAsync()).ToList();
        selectedRentCarDetail = await RentCareDetailService.GetCarInfoListForCreatePayment();

        memberInfoSelected = await RentcarService.GetRentCarsWithMemberInfo();
        newPayment.PaymentDate = DateTime.Today;

        await base.OnInitializedAsync();

    }


    private decimal CalculatePaidAmount()
    {
        var rentCarDetail = selectedRentCarDetail.FirstOrDefault(x => x.RentCarDetailID == newPayment.RentCarDetailID);
        if (rentCarDetail != null)
        {
            return rentCarDetail.MonthlyFeeInstallment.GetValueOrDefault(0) *
                   (newPayment.NofInstallMent.GetValueOrDefault(0) + newPayment.AdvanceInstallMent.GetValueOrDefault(0));
        }
        return 0;
    }
    
}
